// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/net_render.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Spec represents the spec for a scene.
type Spec struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec                 string   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Spec) Reset()         { *m = Spec{} }
func (m *Spec) String() string { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()    {}
func (*Spec) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ea114fcbf489839, []int{0}
}

func (m *Spec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spec.Unmarshal(m, b)
}
func (m *Spec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spec.Marshal(b, m, deterministic)
}
func (m *Spec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spec.Merge(m, src)
}
func (m *Spec) XXX_Size() int {
	return xxx_messageInfo_Spec.Size(m)
}
func (m *Spec) XXX_DiscardUnknown() {
	xxx_messageInfo_Spec.DiscardUnknown(m)
}

var xxx_messageInfo_Spec proto.InternalMessageInfo

func (m *Spec) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Spec) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

// Job is a single job for a worker.
type Job struct {
	// Spec id for the scene.
	SceneId string `protobuf:"bytes,1,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	// The pixel tiles that are supposed to be rendered.
	Tiles                []*Tile  `protobuf:"bytes,2,rep,name=tiles,proto3" json:"tiles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ea114fcbf489839, []int{1}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

func (m *Job) GetTiles() []*Tile {
	if m != nil {
		return m.Tiles
	}
	return nil
}

// A tile represents a single renderable tile of pixels. Starts at (x,y), ends
// at (x+size, y+size).
type Tile struct {
	X                    uint32   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    uint32   `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Size                 uint32   `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tile) Reset()         { *m = Tile{} }
func (m *Tile) String() string { return proto.CompactTextString(m) }
func (*Tile) ProtoMessage()    {}
func (*Tile) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ea114fcbf489839, []int{2}
}

func (m *Tile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tile.Unmarshal(m, b)
}
func (m *Tile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tile.Marshal(b, m, deterministic)
}
func (m *Tile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tile.Merge(m, src)
}
func (m *Tile) XXX_Size() int {
	return xxx_messageInfo_Tile.Size(m)
}
func (m *Tile) XXX_DiscardUnknown() {
	xxx_messageInfo_Tile.DiscardUnknown(m)
}

var xxx_messageInfo_Tile proto.InternalMessageInfo

func (m *Tile) GetX() uint32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Tile) GetY() uint32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Tile) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// JobResult is the result of a single job processed by a worker.
type JobResult struct {
	Pixels               []*Pixel `protobuf:"bytes,1,rep,name=pixels,proto3" json:"pixels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobResult) Reset()         { *m = JobResult{} }
func (m *JobResult) String() string { return proto.CompactTextString(m) }
func (*JobResult) ProtoMessage()    {}
func (*JobResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ea114fcbf489839, []int{3}
}

func (m *JobResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobResult.Unmarshal(m, b)
}
func (m *JobResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobResult.Marshal(b, m, deterministic)
}
func (m *JobResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobResult.Merge(m, src)
}
func (m *JobResult) XXX_Size() int {
	return xxx_messageInfo_JobResult.Size(m)
}
func (m *JobResult) XXX_DiscardUnknown() {
	xxx_messageInfo_JobResult.DiscardUnknown(m)
}

var xxx_messageInfo_JobResult proto.InternalMessageInfo

func (m *JobResult) GetPixels() []*Pixel {
	if m != nil {
		return m.Pixels
	}
	return nil
}

// Pixel represents a single pixel within the canvas.
type Pixel struct {
	X                    uint32   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    uint32   `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Color                uint32   `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pixel) Reset()         { *m = Pixel{} }
func (m *Pixel) String() string { return proto.CompactTextString(m) }
func (*Pixel) ProtoMessage()    {}
func (*Pixel) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ea114fcbf489839, []int{4}
}

func (m *Pixel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pixel.Unmarshal(m, b)
}
func (m *Pixel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pixel.Marshal(b, m, deterministic)
}
func (m *Pixel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pixel.Merge(m, src)
}
func (m *Pixel) XXX_Size() int {
	return xxx_messageInfo_Pixel.Size(m)
}
func (m *Pixel) XXX_DiscardUnknown() {
	xxx_messageInfo_Pixel.DiscardUnknown(m)
}

var xxx_messageInfo_Pixel proto.InternalMessageInfo

func (m *Pixel) GetX() uint32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Pixel) GetY() uint32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Pixel) GetColor() uint32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func init() {
	proto.RegisterType((*Spec)(nil), "net_render.Spec")
	proto.RegisterType((*Job)(nil), "net_render.Job")
	proto.RegisterType((*Tile)(nil), "net_render.Tile")
	proto.RegisterType((*JobResult)(nil), "net_render.JobResult")
	proto.RegisterType((*Pixel)(nil), "net_render.Pixel")
}

func init() { proto.RegisterFile("proto/net_render.proto", fileDescriptor_9ea114fcbf489839) }

var fileDescriptor_9ea114fcbf489839 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcf, 0x4b, 0xf3, 0x40,
	0x10, 0x25, 0x69, 0xd2, 0xef, 0xeb, 0x68, 0xfd, 0xb1, 0x68, 0x89, 0xf5, 0x52, 0x72, 0x90, 0x5a,
	0x24, 0xa9, 0x15, 0x0a, 0x5e, 0x05, 0x41, 0x7b, 0x92, 0x54, 0x10, 0xbc, 0x14, 0xb3, 0x19, 0xe3,
	0xd2, 0x34, 0xb3, 0x6c, 0xb6, 0xd0, 0xfa, 0xd7, 0xcb, 0x6e, 0xaa, 0x56, 0x0f, 0xde, 0xe6, 0xbd,
	0x99, 0xd9, 0x37, 0xef, 0x2d, 0x74, 0xa4, 0x22, 0x4d, 0x71, 0x89, 0x7a, 0xa6, 0xb0, 0xcc, 0x50,
	0x45, 0x96, 0x60, 0xf0, 0xcd, 0x74, 0x4f, 0x73, 0xa2, 0xbc, 0xc0, 0xd8, 0x76, 0xd2, 0xe5, 0x6b,
	0x8c, 0x0b, 0xa9, 0xd7, 0xf5, 0x60, 0x38, 0x00, 0x6f, 0x2a, 0x91, 0xb3, 0x3d, 0x70, 0x45, 0x16,
	0x38, 0x3d, 0xa7, 0xdf, 0x4a, 0x5c, 0x91, 0x31, 0x06, 0x5e, 0x25, 0x91, 0x07, 0xae, 0x65, 0x6c,
	0x1d, 0xde, 0x41, 0x63, 0x42, 0x29, 0x3b, 0x81, 0xff, 0x15, 0xc7, 0x12, 0x67, 0x5f, 0x0b, 0xff,
	0x2c, 0xbe, 0xcf, 0xd8, 0x19, 0xf8, 0x5a, 0x14, 0x58, 0x05, 0x6e, 0xaf, 0xd1, 0xdf, 0x19, 0x1d,
	0x44, 0x5b, 0x87, 0x3d, 0x8a, 0x02, 0x93, 0xba, 0x1d, 0x8e, 0xc1, 0x33, 0x90, 0xed, 0x82, 0xb3,
	0xb2, 0x6f, 0xb4, 0x13, 0x67, 0x65, 0xd0, 0xda, 0x0a, 0xb6, 0x13, 0x67, 0x6d, 0x2f, 0x10, 0xef,
	0x18, 0x34, 0x2c, 0x61, 0xeb, 0x70, 0x0c, 0xad, 0x09, 0xa5, 0x09, 0x56, 0xcb, 0x42, 0xb3, 0x73,
	0x68, 0x4a, 0xb1, 0xc2, 0xa2, 0x0a, 0x1c, 0xab, 0x76, 0xb8, 0xad, 0xf6, 0x60, 0x3a, 0xc9, 0x66,
	0x20, 0xbc, 0x06, 0xdf, 0x12, 0x7f, 0x0a, 0x1e, 0x81, 0xcf, 0xa9, 0x20, 0xb5, 0x51, 0xac, 0xc1,
	0x68, 0x01, 0xcd, 0x27, 0x52, 0x73, 0x54, 0xec, 0x12, 0xfc, 0xa9, 0xf1, 0xc9, 0x7e, 0xd8, 0x32,
	0xe9, 0x75, 0x3b, 0x51, 0x9d, 0x71, 0xf4, 0x99, 0x71, 0x74, 0x6b, 0x32, 0x66, 0x43, 0xf0, 0xcc,
	0x32, 0xdb, 0xdf, 0xde, 0x98, 0x50, 0xda, 0x3d, 0xfe, 0x45, 0xd4, 0x96, 0x86, 0xce, 0xcd, 0xc5,
	0xf3, 0x20, 0x17, 0xfa, 0x6d, 0x99, 0x46, 0x9c, 0x16, 0x71, 0x46, 0x25, 0xe9, 0x92, 0x48, 0xc7,
	0x5a, 0xbd, 0x70, 0x54, 0xe6, 0xa3, 0x39, 0x65, 0x18, 0xcb, 0x79, 0x1e, 0xcb, 0x34, 0x6d, 0x5a,
	0xbd, 0xab, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x90, 0x2b, 0xd6, 0x07, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	Scene(ctx context.Context, in *Spec, opts ...grpc.CallOption) (*empty.Empty, error)
	Work(ctx context.Context, in *Job, opts ...grpc.CallOption) (Worker_WorkClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Scene(ctx context.Context, in *Spec, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/net_render.Worker/Scene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Work(ctx context.Context, in *Job, opts ...grpc.CallOption) (Worker_WorkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[0], "/net_render.Worker/Work", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerWorkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_WorkClient interface {
	Recv() (*JobResult, error)
	grpc.ClientStream
}

type workerWorkClient struct {
	grpc.ClientStream
}

func (x *workerWorkClient) Recv() (*JobResult, error) {
	m := new(JobResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	Scene(context.Context, *Spec) (*empty.Empty, error)
	Work(*Job, Worker_WorkServer) error
}

// UnimplementedWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (*UnimplementedWorkerServer) Scene(ctx context.Context, req *Spec) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scene not implemented")
}
func (*UnimplementedWorkerServer) Work(req *Job, srv Worker_WorkServer) error {
	return status.Errorf(codes.Unimplemented, "method Work not implemented")
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_Scene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Spec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Scene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/net_render.Worker/Scene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Scene(ctx, req.(*Spec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Work_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Job)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).Work(m, &workerWorkServer{stream})
}

type Worker_WorkServer interface {
	Send(*JobResult) error
	grpc.ServerStream
}

type workerWorkServer struct {
	grpc.ServerStream
}

func (x *workerWorkServer) Send(m *JobResult) error {
	return x.ServerStream.SendMsg(m)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "net_render.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scene",
			Handler:    _Worker_Scene_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Work",
			Handler:       _Worker_Work_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/net_render.proto",
}
